# Copyright 2017 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//services/service_manager/public/cpp/service.gni")
import("//services/service_manager/public/service_manifest.gni")
import("//testing/test.gni")

source_set("lib") {
  sources = [
    "common.cc",
    "common.h",
    "ml_service.cc",
    "ml_service.h",
  ]

  if (is_linux) {
    sources += [
      "cl_dnn_symbol_table.cc",
      "cl_dnn_symbol_table.h",
      "compilation_impl_cl_dnn.cc",
      "compilation_impl_cl_dnn.h",
      "execution_impl_cl_dnn.cc",
      "execution_impl_cl_dnn.h",
      "late_binding_symbol_table.cc",
      "late_binding_symbol_table.h",
      "model_impl_cl_dnn.cc",
      "model_impl_cl_dnn.h",
      "neural_network_impl_cl_dnn.cc",
      "neural_network_impl_cl_dnn.h",
    ]
  } else if (is_android) {
    sources += [
      "compilation_impl_android.cc",
      "compilation_impl_android.h",
      "execution_impl_android.cc",
      "execution_impl_android.h",
      "model_impl_android.cc",
      "model_impl_android.h",
      "neural_network_impl_android.cc",
      "neural_network_impl_android.h",
    ]

    include_dirs = [ "${android_ndk_root}/sysroot/usr/include" ]

    libdir = ""
    if (current_cpu == "x86") {
      libdir = "arch-x86/usr/lib"
    } else if (target_cpu == "arm") {
      libdir = "arch-arm/usr/lib"
    } else if (target_cpu == "mips") {
      libdir = "arch-mips/usr/lib"
    } else if (target_cpu == "arm64") {
      libdir = "arch-arm64/usr/lib"
    } else if (target_cpu == "x64") {
      libdir = "arch-x86_64/usr/lib64"
    } else if (target_cpu == "mips64") {
      libdir = "arch-mips64/usr/lib64"
    } else {
      assert(false, "Need android neuralnetworks support for your target arch.")
    }
    lib_dirs = [ "${android_ndk_root}/platforms/android-27/${libdir}" ]

    libs = [ "neuralnetworks" ]
  } else if (is_mac) {
    sources += [
      "compilation_impl_mac.h",
      "compilation_impl_mac.mm",
      "execution_impl_mac.h",
      "execution_impl_mac.mm",
      "model_impl_mac.h",
      "model_impl_mac.mm",
      "mpscnn_context.h",
      "mpscnn_context.mm",
      "neural_network_impl_mac.h",
      "neural_network_impl_mac.mm",
    ]

    libs = [
      "Accelerate.framework",
      "Metal.framework",
      "MetalPerformanceShaders.framework",
    ]
  } else if (is_win) {
    sources += [
      "compilation_impl_cl_dnn.cc",
      "compilation_impl_cl_dnn.h",
      "execution_impl_cl_dnn.cc",
      "execution_impl_cl_dnn.h",
      "model_impl_cl_dnn.cc",
      "model_impl_cl_dnn.h",
      "neural_network_impl_cl_dnn.cc",
      "neural_network_impl_cl_dnn.h",
    ]

    lib_dirs = [ "//third_party/clDNN/build/out/Windows64/Release" ]

    libs = [ "clDNN64.lib" ]
  } else {
    sources += [
      "neural_network_impl.cc",
      "neural_network_impl.h",
    ]
  }

  deps = [
    "//mojo/public/cpp/bindings",
  ]

  if (is_win) {
    deps += [ ":copy_cldnn_dll" ]
  }

  public_deps = [
    "//base",
    "//services/ml/public/interfaces",
    "//services/service_manager/public/cpp",
  ]
}

if (is_win) {
  dll_path = "//third_party/clDNN/build/out/Windows64/Release"
  copy("copy_cldnn_dll") {
    sources = [
      "$dll_path/clDNN64.dll",
    ]
    outputs = [
      "$root_out_dir/{{source_file_part}}",
    ]
  }
}

service_manifest("manifest") {
  name = "ml"
  source = "manifest.json"
}
